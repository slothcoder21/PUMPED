
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  image: 'image',
  height: 'height',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  duration: 'duration',
  notes: 'notes',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  category: 'category'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  muscleGroup: 'muscleGroup',
  equipment: 'equipment',
  instructions: 'instructions',
  videoUrl: 'videoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutExerciseScalarFieldEnum = {
  id: 'id',
  sets: 'sets',
  reps: 'reps',
  weight: 'weight',
  duration: 'duration',
  restTime: 'restTime',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  workoutId: 'workoutId',
  exerciseId: 'exerciseId',
  personalBest: 'personalBest'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  targetDate: 'targetDate',
  isCompleted: 'isCompleted',
  type: 'type',
  metric: 'metric',
  targetValue: 'targetValue',
  currentValue: 'currentValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  unlockedAt: 'unlockedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.WeightHistoryScalarFieldEnum = {
  id: 'id',
  weight: 'weight',
  date: 'date',
  notes: 'notes',
  userId: 'userId'
};

exports.Prisma.BodyMeasurementScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  value: 'value',
  notes: 'notes',
  userId: 'userId'
};

exports.Prisma.AIWorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  fitnessLevel: 'fitnessLevel',
  goal: 'goal',
  duration: 'duration',
  equipment: 'equipment',
  focusArea: 'focusArea',
  warmup: 'warmup',
  cooldown: 'cooldown',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.AIWorkoutExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sets: 'sets',
  reps: 'reps',
  duration: 'duration',
  rest: 'rest',
  instruction: 'instruction',
  order: 'order',
  aiWorkoutId: 'aiWorkoutId',
  exerciseId: 'exerciseId'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  theme: 'theme',
  units: 'units',
  language: 'language',
  privacyLevel: 'privacyLevel',
  workoutReminders: 'workoutReminders',
  progressUpdates: 'progressUpdates',
  achievementAlerts: 'achievementAlerts',
  tipNotifications: 'tipNotifications',
  userId: 'userId'
};

exports.Prisma.ProgressStatScalarFieldEnum = {
  id: 'id',
  date: 'date',
  statType: 'statType',
  value: 'value',
  userId: 'userId'
};

exports.Prisma.WorkoutStreakScalarFieldEnum = {
  id: 'id',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastWorkoutDate: 'lastWorkoutDate',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GoalType = exports.$Enums.GoalType = {
  WEIGHT: 'WEIGHT',
  STRENGTH: 'STRENGTH',
  CARDIO: 'CARDIO',
  HABIT: 'HABIT',
  CUSTOM: 'CUSTOM'
};

exports.MeasurementType = exports.$Enums.MeasurementType = {
  CHEST: 'CHEST',
  WAIST: 'WAIST',
  HIPS: 'HIPS',
  BICEP: 'BICEP',
  THIGH: 'THIGH',
  CALF: 'CALF',
  SHOULDERS: 'SHOULDERS',
  NECK: 'NECK',
  BODY_FAT_PERCENTAGE: 'BODY_FAT_PERCENTAGE',
  OTHER: 'OTHER'
};

exports.StatType = exports.$Enums.StatType = {
  WEIGHT: 'WEIGHT',
  STRENGTH: 'STRENGTH',
  CARDIO: 'CARDIO',
  WORKOUT_FREQUENCY: 'WORKOUT_FREQUENCY',
  BODY_MEASUREMENT: 'BODY_MEASUREMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Workout: 'Workout',
  Exercise: 'Exercise',
  WorkoutExercise: 'WorkoutExercise',
  Goal: 'Goal',
  Achievement: 'Achievement',
  WeightHistory: 'WeightHistory',
  BodyMeasurement: 'BodyMeasurement',
  AIWorkout: 'AIWorkout',
  AIWorkoutExercise: 'AIWorkoutExercise',
  UserSettings: 'UserSettings',
  ProgressStat: 'ProgressStat',
  WorkoutStreak: 'WorkoutStreak'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
